
################################
# key bind
################################
bindkey -e

################################
# History
################################
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename '/home/t86676/.zshrc'

setopt hist_ignore_dups # no-add history previous command
setopt hist_expand      # expand history when completion
setopt pushd_ignore_dups
#setopt auto_pushd
setopt hist_no_store
setopt hist_reduce_blanks

################################
# Completion
################################
#autoload -U colors                                  # color display on prompt
autoload colors                                  # color display on prompt
colors

autoload -Uz compinit
compinit
zstyle ':completion:*:default' menu select=2

setopt auto_cd            # cd with directry name

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' # complete ignorecase

setopt auto_menu          # display completion candidate when press TAB

setopt magic_equal_subst  # complete after =

# ls completion color
eval `dircolors`
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

################################
# Prompt
################################
PROMPT='[%F{yellow}%n@%m%f]%~%# '

# VCS display
autoload -Uz vcs_info
setopt prompt_subst
zstyle ':vcs_info:git:*' check-for-changes false
# zstyle ':vcs_info:git:*' stagedstr "%F{yellow}!"
# zstyle ':vcs_info:git:*' unstagedstr "%F{red}+"
zstyle ':vcs_info:*' formats "%F{green}%c%u[%b]%f"
zstyle ':vcs_info:*' actionformats '[%b|%a]'
precmd () { vcs_info }
RPROMPT=$RPROMPT'${vcs_info_msg_0_}'


################################
# options
################################
setopt extended_glob

setopt no_flow_control                              # desable C-s, C-q

export WORDCHARS="*?_-.[]~=&;!#$%^(){}<>"


################################
# User alias
################################
# check after expanding to origina command
setopt complete_aliases

alias lll='ls -lart'
alias rm='rm -i'


################################
# TMUX setting
################################
TERM=xterm-256color
function is_exists() { type "$1" >/dev/null 2>&1; return $?; }
function is_osx() { [[ $OSTYPE == darwin* ]]; }
function is_screen_running() { [ ! -z "$STY" ]; }
function is_tmux_runnning() { [ ! -z "$TMUX" ]; }
function is_screen_or_tmux_running() { is_screen_running || is_tmux_runnning; }
function shell_has_started_interactively() { [ ! -z "$PS1" ]; }
function is_ssh_running() { [ ! -z "$SSH_CONECTION" ]; }

function tmux_automatically_attach_session()
{
    if is_screen_or_tmux_running; then
        ! is_exists 'tmux' && return 1

        if is_tmux_runnning; then
            echo "${fg_bold[red]} _____ __  __ _   ___  __ ${reset_color}"
            echo "${fg_bold[red]}|_   _|  \/  | | | \ \/ / ${reset_color}"
            echo "${fg_bold[red]}  | | | |\/| | | | |\  /  ${reset_color}"
            echo "${fg_bold[red]}  | | | |  | | |_| |/  \  ${reset_color}"
            echo "${fg_bold[red]}  |_| |_|  |_|\___//_/\_\ ${reset_color}"
        elif is_screen_running; then
            echo "This is on screen."
        fi
    else
        if shell_has_started_interactively && ! is_ssh_running; then
            if ! is_exists 'tmux'; then
                echo 'Error: tmux command not found' 2>&1
                return 1
            fi

            if tmux has-session >/dev/null 2>&1 && tmux list-sessions | grep -qE '.*]$'; then
                # detached session exists
                tmux list-sessions
                echo -n "Tmux: attach? (y/N/num) "
                read
                if [[ "$REPLY" =~ ^[Yy]$ ]] || [[ "$REPLY" == '' ]]; then
                    tmux attach-session
                    if [ $? -eq 0 ]; then
                        echo "$(tmux -V) attached session"
                        return 0
                    fi
                elif [[ "$REPLY" =~ ^[0-9]+$ ]]; then
                    tmux attach -t "$REPLY"
                    if [ $? -eq 0 ]; then
                        echo "$(tmux -V) attached session"
                        return 0
                    fi
                fi
            fi

            if is_osx && is_exists 'reattach-to-user-namespace'; then
                # on OS X force tmux's default command
                # to spawn a shell in the user's namespace
                tmux_config=$(cat $HOME/.tmux.conf <(echo 'set-option -g default-command "reattach-to-user-namespace -l $SHELL"'))
                tmux -f <(echo "$tmux_config") new-session && echo "$(tmux -V) created new session supported OS X"
            else
                tmux new-session && echo "tmux created new session"
            fi
        fi
    fi
}
tmux_automatically_attach_session

# if [ -z $TMUX ]; then
#   if [ -z `tmux ls` ] ; then
#     tmux -2
#   else
#     tmux attach
#   fi
# fi

