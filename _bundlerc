" setting file for NeoBundle

if has('vim_starting')
  set nocompatible

  set runtimepath+=$HOME/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('$HOME/.vim/bundle/'))

NeoBundleFetch 'Shogo/neobundle.vim'

filetype plugin indent on

" let vimproc_updcmd = has('win64') ?
"       \ 'tools\\update-dll-mingw 64' : 'tools\\update-dll-mingw 32'
" execute "NeoBundle 'Shougo/vimproc.vim'," . string({
"       \ 'build' : {
"       \     'windows' : vimproc_updcmd,
"       \     'cygwin' : 'make -f make_cygwin.mak',
"       \     'mac' : 'make -f make_mac.mak',
"       \     'unix' : 'make -f make_unix.mak',
"       \    },
"       \ })

" add plugin names what you want to install
NeoBundle 'itchyny/lightline.vim'
"NeoBundle 'fuenor/qfixhowm'
NeoBundle 'fuenor/qfixgrep'
NeoBundle 'vimtaku/hl_matchit.vim.git'
"NeoBundle 'Shougo/neocomplete.vim'
"    let g:neocomplete#enable_at_startup = 1
"    let g:neocomplete#enable_ignore_case = 1
"    let g:neocomplete#enable_smart_case = 1
"    let g:neocomplete#enable_auto_select = 1
"    let g:neocomplete#enable_enable_camel_case_completion = 0
"    if !exists('g:neocomplete#keyword_patterns')
"        let g:neocomplete#keyword_patterns = {}
"    endif
"    let g:neocomplete#keyword_patterns._ = '\h\w*'

" " Setting for lightline
NeoBundle 'vim-scripts/verilog_emacsauto.vim'
NeoBundle 'tpope/vim-fugitive'
    let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ }
    let g:lightline.component_function = {}
    let g:lightline.component_function.fugitive = 'StlFugitive'
    function! StlFugitive()
      try
        if &ft !~? 'vimfilter\|gundo' && exists('*fugitive#head')
          let _ = fugitive#head()
          return strlen(_) ? 'git['._.']' : ""
        endif
      catch
      endtry
      return ''
    endfunction
    let g:lightline.active = {}
    let g:lightline.inactive = {}
    let g:lightline.active.left = [['mode', 'paste'], ['readonly', 'filename', 'modified'], ['fugitive']]
"NeoBundle 'editorconfig/editorconfig-vim'
NeoBundle 'sgur/vim-editorconfig'

""""""""""""""""""""""""""""""""
""" Markdown
""""""""""""""""""""""""""""""""
NeoBundle 'plasticboy/vim-markdown'
NeoBundle 'kannokanno/previm'
NeoBundle 'tyru/open-browser.vim'

""""""""""""""""""""""""""""""""
""" Unite
""""""""""""""""""""""""""""""""
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }

" grep search
nnoremap <silent> ,g  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
" grep dir search
nnoremap <silent> ,dg  :<C-u>Unite grep -buffer-name=search-buffer<CR>
" grep word at cursor
nnoremap <silent> ,cg :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W><CR>
" re-grep
nnoremap <silent> ,r  :<C-u>UniteResume search-buffer<CR>
" use hw(highway) as unite grep
if executable('hw')
  let g:unite_source_grep_command = 'hw'
  let g:unite_source_grep_default_opts = '--no-group --no-color'
  let g:unite_source_grep_recursive_opt = ''
endif

call neobundle#end()

NeoBundleCheck

let g:loaded_bundlerc=1

" vim: syntax=vim tabstop=2 shiftwidth=2 expandtab:
